@page "/"
@rendermode InteractiveServer
@using PolyPapersApp.Models
@using PolyPapersApp.Services
@inject SemanticScholarService PaperService
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<HeadContent>
    <script src="https://unpkg.com/cytoscape@3.24.0/dist/cytoscape.min.js"></script>
    <script src="js/graph.js"></script>
</HeadContent>

<h3>PolyPapers Graph</h3>

<input @bind="searchQuery" placeholder="Search research papers..." />
<button type="button" @onclick="LoadPapers">Search</button>

<div id="graph" style="width:100%; height:600px; border:1px solid #ccc; margin-top:10px;"></div>

@if (!string.IsNullOrEmpty(selectedPaperTitle))
{
    <div class="paper-details">
        <h4>Selected Paper:</h4>
        <p>@selectedPaperTitle</p>
    </div>
}

@code {
    private string searchQuery = "quantum computing";
    private string selectedPaperTitle = "";
    private List<SemanticPaper> papers = new();
    private HashSet<string> allNodeIds = new();


    private string Shorten(string title, int max = 60)
    {
        return title.Length <= max ? title : title.Substring(0, max) + "...";
    }

    private async Task LoadPapers()
    {
        papers = await PaperService.SearchPapersAsync(searchQuery);
        allNodeIds.Clear();

        var nodes = new List<object>();
        var edges = new List<object>();

        foreach (var paper in papers)
        {
            if (!allNodeIds.Add(paper.PaperId))
                continue;

            nodes.Add(new { data = new { id = paper.PaperId, label = Shorten(paper.Title) } });

            var detailed = await PaperService.GetPaperWithCitationsAsync(paper.PaperId);
            if (detailed?.Citations == null) continue;

            foreach (var citation in detailed.Citations.Take(20))
            {
                if (allNodeIds.Add(citation.PaperId))
                {
                    nodes.Add(new { data = new { id = citation.PaperId, label = Shorten(citation.Title) } });
                }

                edges.Add(new { data = new { source = paper.PaperId, target = citation.PaperId } });
            }
        }

        var dotNetRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("polyGraph.initGraph", "graph", nodes, edges, dotNetRef);
    }


    [JSInvokable]
    public async Task OnNodeClicked(string paperId)
    {
        var paper = await PaperService.GetPaperWithCitationsAsync(paperId);
        if (paper == null || paper.Citations == null) return;

        selectedPaperTitle = paper.Title;

        var newNodes = new List<object>();
        var newEdges = new List<object>();

        foreach (var citation in paper.Citations.Take(20)) 
        {
            if (allNodeIds.Add(citation.PaperId))
            {
                newNodes.Add(new { data = new { id = citation.PaperId, label = Shorten(citation.Title) } });
            }

            newEdges.Add(new { data = new { source = paperId, target = citation.PaperId } });
        }

        await JSRuntime.InvokeVoidAsync("polyGraph.addNodes", newNodes, newEdges, paperId);
        StateHasChanged();
    }
}
